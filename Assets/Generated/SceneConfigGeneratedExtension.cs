//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public SceneConfig sceneConfig { get { return (SceneConfig)GetComponent(CoreComponentIds.SceneConfig); } }
        public bool hasSceneConfig { get { return HasComponent(CoreComponentIds.SceneConfig); } }

        public Entity AddSceneConfig(SceneConfig.SceneType newCurrentSceneType, string newTargetScene) {
            var component = CreateComponent<SceneConfig>(CoreComponentIds.SceneConfig);
            component.CurrentSceneType = newCurrentSceneType;
            component.TargetScene = newTargetScene;
            return AddComponent(CoreComponentIds.SceneConfig, component);
        }

        public Entity ReplaceSceneConfig(SceneConfig.SceneType newCurrentSceneType, string newTargetScene) {
            var component = CreateComponent<SceneConfig>(CoreComponentIds.SceneConfig);
            component.CurrentSceneType = newCurrentSceneType;
            component.TargetScene = newTargetScene;
            ReplaceComponent(CoreComponentIds.SceneConfig, component);
            return this;
        }

        public Entity RemoveSceneConfig() {
            return RemoveComponent(CoreComponentIds.SceneConfig);
        }
    }

    public partial class Context {

        public Entity sceneConfigEntity { get { return GetGroup(CoreMatcher.SceneConfig).GetSingleEntity(); } }
        public SceneConfig sceneConfig { get { return sceneConfigEntity.sceneConfig; } }
        public bool hasSceneConfig { get { return sceneConfigEntity != null; } }

        public Entity SetSceneConfig(SceneConfig.SceneType newCurrentSceneType, string newTargetScene) {
            if(hasSceneConfig) {
                throw new EntitasException("Could not set sceneConfig!\n" + this + " already has an entity with SceneConfig!",
                    "You should check if the context already has a sceneConfigEntity before setting it or use context.ReplaceSceneConfig().");
            }
            var entity = CreateEntity();
            entity.AddSceneConfig(newCurrentSceneType, newTargetScene);
            return entity;
        }

        public Entity ReplaceSceneConfig(SceneConfig.SceneType newCurrentSceneType, string newTargetScene) {
            var entity = sceneConfigEntity;
            if(entity == null) {
                entity = SetSceneConfig(newCurrentSceneType, newTargetScene);
            } else {
                entity.ReplaceSceneConfig(newCurrentSceneType, newTargetScene);
            }

            return entity;
        }

        public void RemoveSceneConfig() {
            DestroyEntity(sceneConfigEntity);
        }
    }
}

    public partial class CoreMatcher {

        static IMatcher _matcherSceneConfig;

        public static IMatcher SceneConfig {
            get {
                if(_matcherSceneConfig == null) {
                    var matcher = (Matcher)Matcher.AllOf(CoreComponentIds.SceneConfig);
                    matcher.componentNames = CoreComponentIds.componentNames;
                    _matcherSceneConfig = matcher;
                }

                return _matcherSceneConfig;
            }
        }
    }
