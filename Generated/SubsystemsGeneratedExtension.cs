//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public Subsystems subsystems { get { return (Subsystems)GetComponent(CoreComponentIds.Subsystems); } }
        public bool hasSubsystems { get { return HasComponent(CoreComponentIds.Subsystems); } }

        public Entity AddSubsystems(Entitas.Systems newSystems) {
            var component = CreateComponent<Subsystems>(CoreComponentIds.Subsystems);
            component.Systems = newSystems;
            return AddComponent(CoreComponentIds.Subsystems, component);
        }

        public Entity ReplaceSubsystems(Entitas.Systems newSystems) {
            var component = CreateComponent<Subsystems>(CoreComponentIds.Subsystems);
            component.Systems = newSystems;
            ReplaceComponent(CoreComponentIds.Subsystems, component);
            return this;
        }

        public Entity RemoveSubsystems() {
            return RemoveComponent(CoreComponentIds.Subsystems);
        }
    }

    public partial class Context {

        public Entity subsystemsEntity { get { return GetGroup(CoreMatcher.Subsystems).GetSingleEntity(); } }
        public Subsystems subsystems { get { return subsystemsEntity.subsystems; } }
        public bool hasSubsystems { get { return subsystemsEntity != null; } }

        public Entity SetSubsystems(Entitas.Systems newSystems) {
            if(hasSubsystems) {
                throw new EntitasException("Could not set subsystems!\n" + this + " already has an entity with Subsystems!",
                    "You should check if the context already has a subsystemsEntity before setting it or use context.ReplaceSubsystems().");
            }
            var entity = CreateEntity();
            entity.AddSubsystems(newSystems);
            return entity;
        }

        public Entity ReplaceSubsystems(Entitas.Systems newSystems) {
            var entity = subsystemsEntity;
            if(entity == null) {
                entity = SetSubsystems(newSystems);
            } else {
                entity.ReplaceSubsystems(newSystems);
            }

            return entity;
        }

        public void RemoveSubsystems() {
            DestroyEntity(subsystemsEntity);
        }
    }
}

    public partial class CoreMatcher {

        static IMatcher _matcherSubsystems;

        public static IMatcher Subsystems {
            get {
                if(_matcherSubsystems == null) {
                    var matcher = (Matcher)Matcher.AllOf(CoreComponentIds.Subsystems);
                    matcher.componentNames = CoreComponentIds.componentNames;
                    _matcherSubsystems = matcher;
                }

                return _matcherSubsystems;
            }
        }
    }
